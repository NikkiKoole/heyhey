{
  "name": "ovy",
  "description": "A fast, elegant, powerful, and cross platform JavaScript OOP library. Support singleton, super call, private, mixins and more.",
  "version": "0.1.6",
  "homepage": "https://github.com/torworx/ovy",
  "repository": {
    "type": "git",
    "url": "git://github.com/torworx/ovy.git"
  },
  "author": {
    "name": "Yuan Tao",
    "email": "torworx@gmail.com"
  },
  "private": false,
  "main": "index",
  "keywords": [
    "ovy",
    "Ovy",
    "OOP",
    "JavaScript OOP",
    "JavaScript Object Oriented Programming",
    "AOP",
    "Aspect Oriented Programming",
    "class",
    "define",
    "extend",
    "object-oriented",
    "inheritance"
  ],
  "devDependencies": {
    "mocha": "*",
    "benchmark": "*",
    "microtime": "*",
    "jsface": "*"
  },
  "readme": "# OvyJS\n\nA fast, elegant, powerful, and cross platform JavaScript OOP library. Support statics, singleton, super call, private, mixins, inherits and more.\n\n## Features\n\n* Work on both server and client side.\n* Support CommonJS.\n* Support statics, singleton, super call, private, mixins, inherits.\n\n## Setup\n\nOvyJS supports both server side (CommonJS) and client side JavaScript (browser).\n\nBrowser:\n\n``` html\n<script src=\"ovy.js\" type=\"text/javascript\"></script>\n```\n\n## API\n### Class Declaration\nThere is just one single method you need to remember for class creation: `Ovy.define`. Its basic syntax is as follows:\n``` javascript\nOvy.define(members);\n```\n* members is an object represents a collection of class members in key-value pairs\n\n**Example**:\n```javascript\nvar Person = Ovy.define({\n    name: 'Unknown',\n\n    constructor: function(name) {\n        if (name) {\n            this.name = name;\n        }\n    },\n\n    say: function(text) {\n        alert(text);\n    }\n});\n\nvar aaron = new Person('Aaron');\n    aaron.say(\"Salad\"); // alert(\"Salad\");\n```\n\n### Class extention\n```javascript\nvar Developer = Ovy.define({\n    extend: 'Person',\n    constructor: function() {\n    \tDeveloper.$superclass.call(this);\n\t},\n    say: function(text) { \n    \tDeveloper.$super.say.call(this, \"print \"+text); \n    }\n});\n```\n\n### Mixins\n```javascript\nvar CanSing = Ovy.define({\n     sing: function() {\n         alert(\"I'm on the highway to hell...\")\n     }\n});\nvar Musician = Ovy.define({\n     mixins: [CanSing]\n})\n```\nIn this case the Musician class will get a sing method from CanSing mixin.\n\nBut what if the Musician already has a sing method? Or you want to mix in two classes, both of which define sing? In such a cases it's good to define mixins as an object, where you assign a name to each mixin:\n```javascript\nvar Musician = Ovy.define({\n     mixins: {\n         canSing: CanSing\n     },\n\n     sing: function() {\n         // delegate singing operation to mixin\n         this.mixins.canSing.sing.call(this);\n     }\n})\n```\nIn this case the sing method of Musician will overwrite the mixed in sing method. But you can access the original mixed in method through special mixins property.\n\n### Inherits\nLike `mixins`, but `inherits` just copy all parent's own properties and methods to sub class, `inhertis` has higher performance than `mixins` but less features than `mixins`.\n```javascript\nvar Musician = Ovy.define({\n     inherits: [CanSing]\n})\n```\n\n### Singleton\n```javascript\nvar Logger = Ovy.define({\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n```\nWhen `singleton` config set to true, the class will be instantiated as singleton\n\n### Statics\nStatic members can be defined using the `statics` config\n```javascript\nvar Computer = Ovy.define({\n    statics: {\n        instanceCount: 0,\n        factory: function(brand) {\n            // 'this' in static methods refer to the class itself\n            return new this({brand: brand});\n        }\n    },\n\n    config: {\n        brand: null\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        // the 'self' property of an instance refers to its class\n        this.self.instanceCount ++;\n    }\n});\n\nvar dellComputer = Computer.factory('Dell');\nvar appleComputer = Computer.factory('Mac');\n\nalert(appleComputer.getBrand()); // using the auto-generated getter to get the value of a config property. Alerts \"Mac\"\n\nalert(Computer.instanceCount); // Alerts \"2\"\n```\n### Private properties\nIn some cases, it is helpful to create a nested scope to contain some private properties. The best way to do this is to pass a function instead of an object as the second parameter. This function will be called to produce the class body:\n```javascript\nvar Bar = Ovy.define(function () {\n     var id = 0;\n\n     return {\n         nextId: function () {\n             return ++id;\n         }\n     };\n });\n```\nWhen using this form of Ovy.define, the function is passed tow references to its parent class and parent prototype. This can be used as an efficient way to access any parent class and parent prototype properties and functions:\n```javascript\nvar Bar = Ovy.define(function(parentClass, parent) {\n\n\treturn {\n\t\tconstructor: function() {\n\t\t\tparentClass.call(this);\n\t\t},\n\t\t\n\t\tsomeMethod: function(arg) {\n\t\t\tparent.call(this, arg);\n\t\t}\t\n\t\n\t}\n});\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/torworx/ovy/issues"
  },
  "_id": "ovy@0.1.6",
  "dist": {
    "shasum": "1d83e5e152d8cbe02866cd4f7dea950e74057dd3",
    "tarball": "http://registry.npmjs.org/ovy/-/ovy-0.1.6.tgz"
  },
  "_from": "ovy@latest",
  "_resolved": "https://registry.npmjs.org/ovy/-/ovy-0.1.6.tgz",
  "scripts": {},
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "torworx",
    "email": "torworx@gmail.com"
  },
  "maintainers": [
    {
      "name": "torworx",
      "email": "torworx@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "1d83e5e152d8cbe02866cd4f7dea950e74057dd3"
}
